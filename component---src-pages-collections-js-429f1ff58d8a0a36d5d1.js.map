{"version":3,"sources":["webpack:///./src/components/IndexCard/IndexCard.js","webpack:///./src/components/Grid/GridItem.js","webpack:///./src/components/Grid/Grid.js","webpack:///./src/components/CollectionPage/CollectionPage.js","webpack:///./src/pages/collections.js"],"names":["IndexCard","GridItem","children","className","Grid","items","sort","Math","random","map","node","fluid","childImageSharp","CollectionPage","data","useState","page","setPage","getPage","PAGES","length","Image","allLargeImages","edges","find","image","name","DescriptionCard","longDescription","noButton","title","description","Button","type","style","fontSize","onClick","gridImages","Layout","SEO"],"mappings":"yh0BAsBeA,I,gCCNAC,MAZf,YAAiC,IAAbC,EAAY,EAAZA,SAClB,OACE,yBAAKC,UAAU,aACZD,I,qBCwBQE,MArBf,YAA0B,IAAVC,EAAS,EAATA,MAId,OAFQA,EALFC,MAAK,kBAAMC,KAAKC,SAAW,MAQ/B,yBAAKL,UAAU,kBAEXE,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACR,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAKC,MAAOD,EAAKE,gBAAgBD,c,wBC4G9BE,MApHf,WACE,IAAMC,EAAI,OADc,EA4CAC,mBAAS,GAA1BC,EA5CiB,KA4CXC,EA5CW,KAwDxB,SAASC,IACP,OAAOF,EAAOG,IAAMC,OAASD,IAAMH,GAAQ,QAwB7C,OACE,yBAAKb,UAAU,6BACb,yBAAKA,UAAU,oBAGf,yBAAKA,UAAU,SACb,kBAACkB,EAAA,EAAD,CAAOV,OAfJG,EAAKQ,eAAeC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAMf,KAAKgB,OAAX,SAA4BV,EAAO,GAAnC,aAGPF,EAAKQ,eAAeC,MAAMC,MAAK,SAACC,GAC9B,MAAO,iBAAAA,EAAMf,KAAKgB,SAUYhB,KAAKE,gBAAgBD,SAGrD,yBAAKR,UAAU,QACb,kBAACwB,EAAA,EAAD,CACEC,iBAAe,EACfC,UAAQ,EACRC,MAAOZ,IAAUY,MACjBC,YAAab,IAAUa,eAI3B,yBAAK5B,UAAU,iBACb,kBAAC6B,EAAA,EAAD,CAAQC,KAAK,YAAYC,MAAO,CAAEC,SAAU,OAASC,QAjD3D,WACMpB,EAAO,GACTC,EAAQD,EAAO,KA+Cb,KAGA,kBAACgB,EAAA,EAAD,CAAQC,KAAK,YAAYC,MAAO,CAAEC,SAAU,OAASC,QAzD3D,WACMpB,EAAOG,IAAMC,OAAS,GACxBH,EAAQD,EAAO,KAuDb,MAKF,yBAAKb,UAAU,cACb,kBAAC,EAAD,CAAME,MAAOS,EAAKuB,WAAWd,WC1GtBV,UATf,WACE,OACE,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKT,MAAM,gBACX,kBAAC,EAAD,S","file":"component---src-pages-collections-js-429f1ff58d8a0a36d5d1.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './IndexCard.css'\n\nfunction IndexCard({ index }) {\n\n  function beautify(index) {\n    return (index < 10) ? `0${index}` : index;\n  }\n\n  return (\n    <div className='index-card-container'>\n      <span className=\"index-card-title\">Something awesome</span>\n      <span className=\"index-card-index\">{beautify(index)}</span>\n    </div>\n  )\n}\n\nIndexCard.propTypes = {\n  index: PropTypes.number\n}\n\nexport default IndexCard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Grid.css'\n\nfunction GridItem({ children }) {\n  return (\n    <div className=\"grid-item\">\n      {children}\n    </div>\n  )\n}\n\nGridItem.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nexport default GridItem;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport GridItem from './GridItem'\nimport Img from 'gatsby-image'\nimport './Grid.css'\n\nfunction shuffle(array) {\n  array.sort(() => Math.random() - 0.5)\n}\n\nfunction Grid({ items }) {\n\n  shuffle(items)\n\n  return (\n    <div className='grid-container'>\n      {\n        items.map(({ node }) =>\n          <GridItem>\n            <Img fluid={node.childImageSharp.fluid} />\n          </GridItem>\n        )\n      }\n    </div>\n  )\n}\n\nGrid.propTypes = {\n  items: PropTypes.array.isRequired\n}\n\nexport default Grid;","import React, { useState } from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Image from '@components/Image'\nimport DescriptionCard from '@components/DescriptionCard'\nimport IndexCard from '@components/IndexCard'\nimport Button from '@components/Button'\nimport { Grid } from '@components/Grid'\nimport './CollectionPage.css'\nimport { pages as PAGES } from './collections.json'\n\n\nfunction CollectionPage() {\n  const data = useStaticQuery(graphql`\n  query {\n    gridImages: allFile(filter: { name: { regex: \"/page-1-grid-*/\" }, extension: { regex: \"/(jpeg|jpg|gif|png)/\" }, sourceInstanceName: { eq: \"images\"}}) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 300) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n    allThumbImages: allFile(filter: { name: { regex: \"/thumb/\" }, extension: { regex: \"/(jpeg|jpg|gif|png)/\" }, sourceInstanceName: { eq: \"images\"}}) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxWidth: 300, maxHeight: 240) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n    allLargeImages: allFile(filter: { name: { regex: \"/large/\" }, extension: { regex: \"/(jpeg|jpg|gif|png)/\" }, sourceInstanceName: { eq: \"images\"}}) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxWidth: 300) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n  }\n  `)\n\n  const [page, setPage] = useState(0)\n\n  function incrementPage() {\n    if (page < PAGES.length - 1)\n      setPage(page + 1)\n  }\n\n  function decrementPage() {\n    if (page > 0)\n      setPage(page - 1)\n  }\n\n  function getPage() {\n    return page < PAGES.length ? PAGES[page] : 'dummy'\n  }\n\n  function getThumbImage() {\n    return data.allThumbImages.edges.find((image) => {\n      return image.node.name === `page-${page + 1}-thumb`\n    }) ||\n\n      data.allThumbImages.edges.find((image) => {\n        return image.node.name === `page-1-thumb`\n      })\n  }\n\n\n  function getLargeImage() {\n    return data.allLargeImages.edges.find((image) => {\n      return image.node.name === `page-${page + 1}-large`\n    }) ||\n\n      data.allLargeImages.edges.find((image) => {\n        return image.node.name === `page-1-large`\n      })\n  }\n\n  return (\n    <div className=\"collection-page-container\">\n      <div className=\"thumb-container\">\n      </div>\n\n      <div className=\"large\">\n        <Image fluid={getLargeImage().node.childImageSharp.fluid} />\n      </div>\n\n      <div className=\"card\">\n        <DescriptionCard\n          longDescription\n          noButton\n          title={getPage().title}\n          description={getPage().description}\n        />\n      </div>\n\n      <div className=\"btn-container\">\n        <Button type=\"secondary\" style={{ fontSize: '2em' }} onClick={decrementPage} >\n          ←\n        </Button>\n        <Button type=\"secondary\" style={{ fontSize: '2em' }} onClick={incrementPage} >\n          →\n        </Button>\n      </div>\n\n      <div className=\"image-grid\">\n        <Grid items={data.gridImages.edges} />\n      </div>\n\n    </div>\n  )\n}\n\nexport default CollectionPage\n","import React from \"react\"\nimport Layout from \"@components/Layout\"\nimport SEO from \"@components/SEO\"\nimport CollectionPageContainer from \"@components/CollectionPage\"\n\nfunction CollectionPage() {\n  return (\n    <Layout>\n      <SEO title=\"Collections\" />\n      <CollectionPageContainer />\n    </Layout>\n  )\n}\n\nexport default CollectionPage\n"],"sourceRoot":""}